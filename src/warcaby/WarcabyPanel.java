/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package warcaby;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static java.lang.Math.abs;

/**
 *
 * @author Piotr
 */
public class WarcabyPanel extends javax.swing.JFrame implements Game, MouseListener {

    public static int boardHeight = 400;
    public static final int boardWidth = 400;
    public static int boardPaneWidth = 50;
    public static int boardPaneHeight = 50;
    public static boolean debug = true;
    private Board[][] board = new Board[8][8];
    private Player p1;
    private Player p2;
    private Player turn;
    public static Piece selected = new Piece(true, 0, 0, 0, 0);

    /**
     * Creates new form WarcabyPanel
     */
    public WarcabyPanel() {
        p1 = new Player(true);
        p2 = new Player(false);
        turn = p1;
        initComponents();
        jPanel1.addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 437, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(443, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WarcabyPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WarcabyPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WarcabyPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WarcabyPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WarcabyPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void drawBoard(Graphics g) {
        int i = 0, j = 0, counter = 0;
        Graphics2D g2 = (Graphics2D) g;
        for (int y = 0; y < boardHeight; y += boardPaneHeight, j++) {
            for (int x = 0; x < boardWidth && i < board.length; x += boardPaneWidth, i++) {
                counter++;
                if (counter > 1) {
                    counter = 0;
                }
                board[i][j] = new Board(counter > 0, x, y, boardPaneWidth, boardPaneHeight); //false czany //true bialy
                board[i][j].draw(g);
            }
            i = 0;
            counter--;
        }
    }

    @Override
    public void drawPieces(Graphics g, Player p) {
        p.draw(g);
    }

    @Override
    public void update(Graphics g) {

    }

    @Override
    public void paint(Graphics g) {
        drawBoard(jPanel1.getGraphics());
        drawPieces(jPanel1.getGraphics(), p1);
        drawPieces(jPanel1.getGraphics(), p2);
    }

    public Piece select(int x, int y) {
        System.out.println(turn);
        for (Piece p : turn.piece) {
            if (p.contains(new Point(x, y))) {
                return p;
            }
        }
        System.out.println("NULL");
        return null;
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        Piece p = select(e.getX(), e.getY());
        if (p != null) {
            selected = p;
            paint(jPanel1.getGraphics());;
        } else {
            selected = null;
        }
    }

    public boolean check(Piece p, Point pD) {
        Point pC = new Point(p.x, p.y);
        int x = p.x / boardPaneWidth;
        int y = p.y / boardPaneHeight;
        if(p.type){
            y++;
        }else y--;
        jPanel1.getGraphics().setColor(Color.red);
        System.out.println(board[x - 1][y - 1].x + " "+board[x - 1][y - 1].y);
        
        for (Piece piece : turn.piece) {
            
            if (p.type&&(x - 1 > 0 && y - 1 > 0
                    && piece.x == board[x - 1][y - 1].x && piece.y == board[x - 1][y - 1].y)
                    || (x + 1 < board.length
                    && piece.x == board[x + 1][y - 1].x && piece.y == board[x + 1][y - 1].y)) {
                System.out.println("nope");
                return false;
            }else return true;
        }
        return true;
    }

    public void match(Piece p, Point pD) {
        if (check(p, pD)) {
            for (int y = 0; y < board.length; y++) {
                for (int x = 0; x < board.length; x++) {
                    if (board[x][y].contains(new Point(pD.x, pD.y))) {
                        System.out.println("lets do this");
                        p.x = board[x][y].x;
                        p.y = board[x][y].y;
                        if (turn.equals(p1)) {
                            turn = p2;
                            jLabel1.setText("Player Czarny");
                        } else {
                            turn = p1;
                            jLabel1.setText("Player Bialy");
                        }
                    }
                }
            }
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (selected != null && !selected.contains(new Point(e.getX(), e.getY()))) {
            match(selected, new Point(e.getX(), e.getY()));
            selected = new Piece(false, 0, 0, 0, 0);
            paint(jPanel1.getGraphics());
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

}
